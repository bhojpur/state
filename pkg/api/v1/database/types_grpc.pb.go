// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package database

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBClient is the client API for DB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBClient interface {
	Init(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Entity, error)
	Get(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	GetStream(ctx context.Context, opts ...grpc.CallOption) (DB_GetStreamClient, error)
	Has(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error)
	Set(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	SetSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	Delete(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	DeleteSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error)
	Iterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_IteratorClient, error)
	ReverseIterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_ReverseIteratorClient, error)
	// rpc print(Nothing) returns (Entity) {}
	Stats(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Stats, error)
	BatchWrite(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error)
	BatchWriteSync(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error)
}

type dBClient struct {
	cc grpc.ClientConnInterface
}

func NewDBClient(cc grpc.ClientConnInterface) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) Init(ctx context.Context, in *Init, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/v1.database.DB/init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Get(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/v1.database.DB/get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) GetStream(ctx context.Context, opts ...grpc.CallOption) (DB_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &DB_ServiceDesc.Streams[0], "/v1.database.DB/getStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBGetStreamClient{stream}
	return x, nil
}

type DB_GetStreamClient interface {
	Send(*Entity) error
	Recv() (*Entity, error)
	grpc.ClientStream
}

type dBGetStreamClient struct {
	grpc.ClientStream
}

func (x *dBGetStreamClient) Send(m *Entity) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dBGetStreamClient) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) Has(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Entity, error) {
	out := new(Entity)
	err := c.cc.Invoke(ctx, "/v1.database.DB/has", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Set(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/v1.database.DB/set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) SetSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/v1.database.DB/setSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Delete(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/v1.database.DB/delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) DeleteSync(ctx context.Context, in *Entity, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/v1.database.DB/deleteSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Iterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_IteratorClient, error) {
	stream, err := c.cc.NewStream(ctx, &DB_ServiceDesc.Streams[1], "/v1.database.DB/iterator", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBIteratorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DB_IteratorClient interface {
	Recv() (*Iterator, error)
	grpc.ClientStream
}

type dBIteratorClient struct {
	grpc.ClientStream
}

func (x *dBIteratorClient) Recv() (*Iterator, error) {
	m := new(Iterator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) ReverseIterator(ctx context.Context, in *Entity, opts ...grpc.CallOption) (DB_ReverseIteratorClient, error) {
	stream, err := c.cc.NewStream(ctx, &DB_ServiceDesc.Streams[2], "/v1.database.DB/reverseIterator", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBReverseIteratorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DB_ReverseIteratorClient interface {
	Recv() (*Iterator, error)
	grpc.ClientStream
}

type dBReverseIteratorClient struct {
	grpc.ClientStream
}

func (x *dBReverseIteratorClient) Recv() (*Iterator, error) {
	m := new(Iterator)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) Stats(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Stats, error) {
	out := new(Stats)
	err := c.cc.Invoke(ctx, "/v1.database.DB/stats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) BatchWrite(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/v1.database.DB/batchWrite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) BatchWriteSync(ctx context.Context, in *Batch, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/v1.database.DB/batchWriteSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBServer is the server API for DB service.
// All implementations must embed UnimplementedDBServer
// for forward compatibility
type DBServer interface {
	Init(context.Context, *Init) (*Entity, error)
	Get(context.Context, *Entity) (*Entity, error)
	GetStream(DB_GetStreamServer) error
	Has(context.Context, *Entity) (*Entity, error)
	Set(context.Context, *Entity) (*Nothing, error)
	SetSync(context.Context, *Entity) (*Nothing, error)
	Delete(context.Context, *Entity) (*Nothing, error)
	DeleteSync(context.Context, *Entity) (*Nothing, error)
	Iterator(*Entity, DB_IteratorServer) error
	ReverseIterator(*Entity, DB_ReverseIteratorServer) error
	// rpc print(Nothing) returns (Entity) {}
	Stats(context.Context, *Nothing) (*Stats, error)
	BatchWrite(context.Context, *Batch) (*Nothing, error)
	BatchWriteSync(context.Context, *Batch) (*Nothing, error)
	mustEmbedUnimplementedDBServer()
}

// UnimplementedDBServer must be embedded to have forward compatible implementations.
type UnimplementedDBServer struct {
}

func (UnimplementedDBServer) Init(context.Context, *Init) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedDBServer) Get(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDBServer) GetStream(DB_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (UnimplementedDBServer) Has(context.Context, *Entity) (*Entity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Has not implemented")
}
func (UnimplementedDBServer) Set(context.Context, *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedDBServer) SetSync(context.Context, *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSync not implemented")
}
func (UnimplementedDBServer) Delete(context.Context, *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDBServer) DeleteSync(context.Context, *Entity) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSync not implemented")
}
func (UnimplementedDBServer) Iterator(*Entity, DB_IteratorServer) error {
	return status.Errorf(codes.Unimplemented, "method Iterator not implemented")
}
func (UnimplementedDBServer) ReverseIterator(*Entity, DB_ReverseIteratorServer) error {
	return status.Errorf(codes.Unimplemented, "method ReverseIterator not implemented")
}
func (UnimplementedDBServer) Stats(context.Context, *Nothing) (*Stats, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedDBServer) BatchWrite(context.Context, *Batch) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWrite not implemented")
}
func (UnimplementedDBServer) BatchWriteSync(context.Context, *Batch) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchWriteSync not implemented")
}
func (UnimplementedDBServer) mustEmbedUnimplementedDBServer() {}

// UnsafeDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBServer will
// result in compilation errors.
type UnsafeDBServer interface {
	mustEmbedUnimplementedDBServer()
}

func RegisterDBServer(s grpc.ServiceRegistrar, srv DBServer) {
	s.RegisterService(&DB_ServiceDesc, srv)
}

func _DB_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Init)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Init(ctx, req.(*Init))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Get(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DBServer).GetStream(&dBGetStreamServer{stream})
}

type DB_GetStreamServer interface {
	Send(*Entity) error
	Recv() (*Entity, error)
	grpc.ServerStream
}

type dBGetStreamServer struct {
	grpc.ServerStream
}

func (x *dBGetStreamServer) Send(m *Entity) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dBGetStreamServer) Recv() (*Entity, error) {
	m := new(Entity)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DB_Has_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Has(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/has",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Has(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Set(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_SetSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).SetSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/setSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).SetSync(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Delete(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_DeleteSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Entity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).DeleteSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/deleteSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).DeleteSync(ctx, req.(*Entity))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Iterator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBServer).Iterator(m, &dBIteratorServer{stream})
}

type DB_IteratorServer interface {
	Send(*Iterator) error
	grpc.ServerStream
}

type dBIteratorServer struct {
	grpc.ServerStream
}

func (x *dBIteratorServer) Send(m *Iterator) error {
	return x.ServerStream.SendMsg(m)
}

func _DB_ReverseIterator_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Entity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBServer).ReverseIterator(m, &dBReverseIteratorServer{stream})
}

type DB_ReverseIteratorServer interface {
	Send(*Iterator) error
	grpc.ServerStream
}

type dBReverseIteratorServer struct {
	grpc.ServerStream
}

func (x *dBReverseIteratorServer) Send(m *Iterator) error {
	return x.ServerStream.SendMsg(m)
}

func _DB_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Stats(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_BatchWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).BatchWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/batchWrite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).BatchWrite(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_BatchWriteSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Batch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).BatchWriteSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.database.DB/batchWriteSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).BatchWriteSync(ctx, req.(*Batch))
	}
	return interceptor(ctx, in, info, handler)
}

// DB_ServiceDesc is the grpc.ServiceDesc for DB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.database.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "init",
			Handler:    _DB_Init_Handler,
		},
		{
			MethodName: "get",
			Handler:    _DB_Get_Handler,
		},
		{
			MethodName: "has",
			Handler:    _DB_Has_Handler,
		},
		{
			MethodName: "set",
			Handler:    _DB_Set_Handler,
		},
		{
			MethodName: "setSync",
			Handler:    _DB_SetSync_Handler,
		},
		{
			MethodName: "delete",
			Handler:    _DB_Delete_Handler,
		},
		{
			MethodName: "deleteSync",
			Handler:    _DB_DeleteSync_Handler,
		},
		{
			MethodName: "stats",
			Handler:    _DB_Stats_Handler,
		},
		{
			MethodName: "batchWrite",
			Handler:    _DB_BatchWrite_Handler,
		},
		{
			MethodName: "batchWriteSync",
			Handler:    _DB_BatchWriteSync_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "getStream",
			Handler:       _DB_GetStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "iterator",
			Handler:       _DB_Iterator_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "reverseIterator",
			Handler:       _DB_ReverseIterator_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/v1/database/types.proto",
}
